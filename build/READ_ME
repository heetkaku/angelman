To compute the PSD results follow these steps:

1. Add the 'scripting' directory to Python's path in order to run the code successfully.
 
2. To obtain the dataset containing PSDs run build.py (scripting/build/spectrum_build.py)
   All input arguments have been set to what was used in the manuscript. 
   Make sure the SAVE_PATH & META_PATH are correct. 
   The CSV file pointed by META_PATH needs to be correct depending on which time point is desired.
   For example: If the EDFs and annotations are slected for 3 weeks post 3 weeks animals, the META_PATH 
   should point towards .../group_info_3week_post3week.csv
   
3. After running build.py, you should have a dictionary named dset in your workspace.
   This is what dset should look like:
   
   KEY                		  VALUE
   annotations (list):        list of annotations included. default: ['ignore']
   axes (list):		          axes labels for 'data' ndarray. default: ['annotations', 'channels', 'frequencies', 'names']
   channels (numpy.array):    channel numbers included in 'data'
   data (ndarray): 	          n-dimensional PSD array with the dimensions in the order of 'axes'
   frequencies (numpy.array): corresponding frequencies of PSDs
   metadata (dict):           filenames as key and metadata from csv as values
   names (list):              filenames in the order as they are in 'data' along the names dimension (see 'axes')
   parameters (dict):         dictionary of important input parameters used to run the code
   
4. To obtain  psds, normalized psds, band powers, relative band powers and band ratios. Run the get_metrics.py script.
   (scripting/build/spectrum_get_metrics.py)
   Make sure 'DPATH' is pointing to the desired dataset. Select 'GROUP' as desired. Options include 'a','b','c' or
   'd'. a=AS ASO, b=WT, c=MUT, d=SNORD 115 ASO. Also, channels are in the following order: FC, VC, SC, EMG.
   After running this script successfully, workspace should have 5 more variables:
   
   i. abs_psd:         n-dimensional array containing power spectrum densities with dimensions 
                       following this order; channels x frequencies x animals
  ii. normalized_psd:  n-dimensional array containing normalized power spectrum densities with dimensions 
                       following this order; channels x frequencies x animals (normalized to power in 1-100Hz)
 iii. absolute_powers: n-dimensional array containing absolute band powers with dimensions following this order; 
                       channels x bands x animals
  iv. relative_powers: n-dimensional array containing relative band powers with dimensions following this order; 
                       channels x bands x animals. Powers are normalized using cutoffs provided to band_powers().
                       See scripting.metrics for details. Cutoffs default to 1-100Hz
   v. band_ratios:     n-dimensional array containing low:high (8-25Hz:50-100Hz) band ratios with dimensions 
                       following this order; channels x 1 x animals
                       
###########################################################################################################################################

To compute the sleep results follow these steps:

1. Add the 'scripting' directory to Python's path in order to run the code successfully.
 
2. To obtain the dataset containing sleep scores run build.py (scripting/build/sleep_build.py)
   All input arguments have been set to what was used in the manuscript. 
   Make sure the SAVE_PATH is correct. META_PATH will be asked by code interactively. 
   The CSV file pointed by META_PATH needs to be correct depending on which time point is desired.
   For example: If the scores and probabilities are slected for 3 weeks post 3 weeks animals, the META_PATH 
   should point towards .../group_info_3week_post3week.csv
   
3. After running build.py, you should have a dictionary named dset in your workspace.
   This is what dset should look like:
   
   KEY                		  VALUE
   axes (list):		          axes labels for 'data' ndarray. default: ['names', 'epochs', 'score']
   data (ndarray): 	          n-dimensional scores array with the dimensions in the order of 'axes'
   fpaths (list):             list of tuples containing matched score and probability paths
   metadata (dict):           filenames as key and metadata from csv as values
   names (list):              filenames in the order as they are in 'data' along the names dimension (see 'axes')
   
4. To obtain sleep state distribution, run the get_metrics.py script.
   (scripting/build/sleep_get_metrics.py)
   Make sure 'DPATH' is pointing to the desired dataset. Select 'GROUP' as desired. Options include 'a','b','c' or
   'd'. a=AS ASO, b=WT, c=MUT, d=SNORD 115 ASO.
   After running this script successfully, workspace should have a variable named 'dist':
   
   i. dist (ndarray):  n-dimensional array containing proportion of sleep states within each segment with dimensions 
                       following this order; state x segment x animal

NOTE: Sleep is scored for 24 hours for all animals. Each scoring epoch is 4s long. This gives us 21600 epochs for 24 hours.
If you run get_metrics.py with default settings, it will yield results for 2 hour segments and dist.shape[1] = 12.
(Meaning 12, 2-hour segments making 24 hours in total).

See docs for SPINDLE publication, the automated sleep scoring algorithm used to generate results.
